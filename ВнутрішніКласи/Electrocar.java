package ВнутрішніКласи;

//Вкладені класи створюються в середні інших класів для розмежування логіки всередені самого класу при створенні
// складних конструкцій
public class Electrocar {
    private int id;
    static int temp;
    static int power;
    Motor motor = new Motor();



    //1)Нестатичний вкладений клас він відноситься до обєкту або являєть частиною обєкта, мають доступ до статичних і нестатичних полів
    // обєкта(класу у якому він створений).Створюються для розмежування могіки всередені самого класу при створенні складних
    // конструкцій.Зовнішній клас не має прямого досту до полів внутрішньго класу. Обєкт цого підкласу неможна створити за межами підкласу
    private class Motor extends A {
    int power;

        @Override
        void aMetod() {
            super.aMetod();
        }


        public void startMotor(){System.out.println("Motor" + id + "is start" );}
}


//2)Статичний вкладений клас  має доступ тільки  до статичних  полів обєкту(класу у якому він створений)
    //він призначений для того щоб звязувати два обєкта у загальному класі через статичні поля (класу у якому він створений)
    // переважно створюється для зовнішньго доступу обєкт цього підкласу може бути створений поза межами даного підкалсу
// загальний клас немає прямого доступу до методів даного підкласу і навпаки підклас немає доступу до метові загального класу
public static  class Battery{
    public void charge(){
        System.out.println("Bateri is charge");
    }
}


public void start(){
    Motor motor = new Motor();
    motor.startMotor();
    System.out.println("Elecrocar"+ id+ "is starting");

}

    //3)Вкладений клас у методі він має доступ до статичних і нестатичних полів загального класу
// і до полів метода в якому створений даний підклас. Викликати даний піклас можна через обєкт загального класу
// викликавши метод створення внутрішньго класу на обєкті загального класу
public void vkladClas(){
     int x=1;
    class SomeClass{
        public void someMetod(){System.out.println(id + x );

        }

    }
}
}


class A{
    int a;
    void aMetod(){

    }
}