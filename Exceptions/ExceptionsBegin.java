package Exceptions;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
//Тема Exceptions.Виключення і помилки виникають під час виконання програми і повідомляють нам про виниклу проблему
// яка не може бути вирішена. Під час виконання програми коли стається якись Exception створюється обєкт який
// описує дане виключення і даним обєктом можна маніпулювати викликаючи методи виконання програми припиняється
// і починається обробка даного Exception в залежності від
// типу Exception програма може продовжити або припинити своє виконання.
//Усі виключення поділяються на перевіряємі(Checked) і неперевіряємі(Unchecked)
//До неперевіряємих відноситься клас Eror і всі його потомки і калас Runtime Exception і всі його потомки
//Неперевіряємі виключення те ті які компілятор не підсвічує непоказує
//Перевіряємі це ті які компілятор бачить і пропунує нам їх опрацювати
//Виключення Eror це серйозні виключення які виникають під час роботи програми їх обробка є небажаною і
// відноситься до сфери роботи JVM


//RantaimException це виключнення відповідальність за обробку виключень даного типу лежить на програмістові і
// може бути завершена без поганого впливу на роботу програми(ділеення на нуль
// спроба звернення до елемента масиву якого не існує спроба звернення до неіснуючого поля обєкта )


//1)Прості Exceptions
class Begin{
    public static void main (String[] ards){
//System.out.println(1/0);//Ділення на 0 RantaimException
 int array[]={1,2,3};
 //array[4]=3;//Вихід за межі масиву RantaimException
    } }




//2)

//В даній програмі створюється файл  який зсилається на зовнішній файл або директорію. Програма вимагає опрацювати
// Exception при сценарії коли файл або директорія будуть відсутні або не знайдені


//Перший спосіб опрацювання даного Exceptiona  створюється виключення у головному методі
// throws FileNotFoundException якщо файл відсутній на екран виведеться дана помилка
public class ExceptionsBegin {
    public static void main (String[] ards) throws FileNotFoundException {

        File file = new File("abcd");
        Scanner scanner = new Scanner(file);

    }}




//Другий спосіб  опрацювання даного Exceptiona  створюється блок  виключення try/catch і в цей блок поміщається код
// який може викликати  Exception
//try/catch- тут try каже постарайся з цього коду catch(зловити Exception записується вид Exceptiona)

class Begin2{
public static void main (String[] ards){


    File file = new File("abcd");
    try {
        Scanner scanner = new Scanner(file);
    } catch (Exception e) // e в даному блоці це створений обєкт виключення/помилки
    {e.printStackTrace();// Це є блок опрцювання помилки якась логіка в даному випадку тут йде звернення до обєкта помилки через виклик на ньому метода
    } finally {  }         //Даний блок виконується в будь якому випадку не залежно від Exceptiona



    //cath у даному коді виступає як метод обробки Exception даний метод можна міняти тобто якщо тут буде якась Exception
// помилка то можна буде прописати якусь логіку сценацій реалізації у стандартному вигляді це виклик на обєкті
// методу який показує помилку



    // try {
    //}catch (FileNotFoundException | ArithmeticException e);//В блок catch можна поміщати безліч типів виключень
}     // {e.printStackTrace();} При такому записі кожне виключення буде опрацьвуватичь однаково

    // try {
    //}catch (ArithmeticException e);//Можна викроистовувати декілька блоків catch тоді кожна помилка буде опрацьовуватись по різному
    // }catch (FileNotFoundException d }



public void readFile() throws FileNotFoundException {
    File file = new File("abcd");
Scanner scanner = new Scanner(file);

}
}


