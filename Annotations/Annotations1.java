package Annotations;
//https://geekbrains.ru/posts/java_annotations
//http://blog.harrix.org/article/7231
//http://blog.harrix.org/article/7246
//https://habr.com/company/golovachcourses/blog/217595/


//Аннотации, применяемые к исходному коду:
//@Override - аннотация-маркер, которая может применяться только к методам. Метод, аннотированный как @Override,
// должен переопределять метод супер класса. @Override — проверяет, переопределён ли метод.
// Вызывает ошибку компиляции / интерпретации, если метод не найден в родительском классе или интерфейсе;

//@Deprecated — отмечает, что метод устарел и не рекомендуется к использованию. Предполагается, что по каким-то причинам
// этот метод пока оставлен, но будет удалён в будущих версиях. Вызывает предупреждение компиляции, если метод используется;

//@SuppressWarnings — указывает компилятору подавить предупреждения компиляции, определённые в параметрах аннотации;

//@SafeVarargs —  указывает, что никакие небезопасные действия, связанные с параметром переменного количества аргументов,
// недопустимы. Применяется только к методам и конструкторам с переменным количеством аргументов, которые объявлены как static или final.
//Аннотации, применяемые к другим аннотациям:

//@Retention — определяет, как отмеченная аннотация может храниться — в коде, в скомпилированном классе или во время работы кода.
// Аннотация @Retention позволяет указать жизненный цикл аннотации: будет она присутствовать только в исходном коде,
// в скомпилированном файле, или она будет также видна и в процессе выполнения. Выбор нужного типа зависит от того,
// как вы хотите использовать аннотацию, например, генерировать что-то побочное из исходных кодов, или в процессе выполнения
// стучаться к классу через reflection.


//@Documented — отмечает аннотацию для включения в документацию. Аннотация @Documented указывает, что помеченная таким образом
// аннотация должна быть добавлена в javadoc поля/метода и так далее
//



public class Annotations1 {

    class SomeClass {
        void method() {
            System.out.println("Работает метод родительского класса.");
        }
    }

    class AnotherClass extends SomeClass { // наследуем методы SomeClass в новом классе
        @Override
        void method() { // переопределяем метод
            System.out.println("Работает метод класса-потомка.");
            System.out.println("Работает метод класса-потомка.");

        }
    }
}
