package Потоки5ЗберіганняЗміннихВПамятіІVolatile;


//Ключове слово volatile призначене для організації взаємодії потоків якщо є якась переміння і деякі потоки читають дану перемінну а деаякі
// записують щось у неї


import java.util.Scanner;

//У даній програмі моделюється ситуація у якій потрібно застосувати volatile
public class Test {
    public static void main(String[] args) {
        MyThead myThead = new MyThead();
        myThead.start();//Запуск потоку

        //Після запуску потоку записується блок коду який на вводі з клавіатури чекає натиснення кнопки ентер при натисканні кнопки викликається
        // метод який має зупинити цикл в потоці.Прооблема в тім що при записанні даного коду без volatile виконання даного методу не гарантоване.

        //Причина даної проблеми лежить у будові процесора і способі виноконанні задач процесором при роботі з потоками. В кожному із ядер
        // процесора є власна хеш память робота даної памяті дуже швидка і при роботі процесор звертається до цеї памяті при роботі з потоками у
         // дану память процесора записуються перемінні для швидкого звернення до них при роботі це ті змінні які створюються у класі MyThead
        //Якщо програма працює з декількома потоками тоді для роботи можуть задіюватися декілька ядер процесора і кожне ядро із свої блоком хеш
        // памяті в який буде перезаписуватись якась певна змінна відносно того якому ядру випало працювати з потоком. В такому випадку можуть виникати
        // не точності роботи при яких в хеш памяті ядер процесора одна і та сама змінна буде мати різні значення.
        // Для того щоб такого не було змінній надається ключове слово volotail яке означаює те щоб перемінна не записувалась у хеш память ядер процесрора
        // а зажди буде знаходитись у головній памяті компютора і кожен раз поток щоб зчитати дану перемінну буде звертатися до головної памяті компютера
        // і в такому випадку кожен раз у потока буде одне значення перемінної

          //В нових операційних системах когерентність хешів добре реалізована що майже виключає виникнення кохешинала навіть якщо зміні непрописані volаtile
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        myThead.shutdown();
    }
}



//Створення власного потоку і прописання в ньому логіки виконання
class MyThead extends Thread {
    private volatile boolean running =true;
    @Override
    public void run() {
        while (running){
            System.out.println("Hello");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
public void shutdown(){
        this.running= false;
}
}
