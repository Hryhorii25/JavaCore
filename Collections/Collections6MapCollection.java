package Collections;
//491 Шилд
import java.util.*;
public class Collections6MapCollection {
//Map це окрема колекція яка не наслідується від інтерфейсу(Collection) яка зберігає і працює із елементами по їхньому ключу. Ключ це обєкт який використовуєть
// для подальшого використання даних. Ключі можуть бути унікальними а значення можуть дублюватися. Map не реалізують інтерфейс Iterable. Це означає що не можна проходити по карті
// формою for each цикла for.Задаючи ключ і значення можна поміщати обєкт в Map


    //Інтерфейси які підтримують Map
    //Map Відображає унікальні ключі і елементи
    //Map.Entry Описують елементи карти.Це владений клас Map // Методи 490 Шилд
    //NavigableMap розширення SortedMap для обробки вилучення елементів на основі пошуку по найближчому співпадінню
    //SortedMap розширяє Map таким чином що ключі розміщуються по зростанню

    public static void main (String[] args ) {
//MAP.Є декілька класів реалізації даного інтерфейсу
        //Map<K,V> загальний запис   K ключ,V значення
        // Map<String,Integer> map = new HashMap<>();//Створення мапи через дженнерік типи ключа і значення

        //Є пять видів даної колекції Map

        Map hashMap = new HashMap();// HashMap це мапа яка зберігає свої елементи на основі хеша з допомогою ключів які не повторюються зберігання відбувається неупорядковано(ключі не відсортовані) в
                                    // нодах які представляють собою сукупність трьох значень hash;key;value    ст 491 Г.Шилд



        Map linkedHashMap = new LinkedHashMap();//Це мапа з впорядкованими значеннями в тім порядку в якому елементи були поміщені
                                               //сюди в такому порядку вони будуть виведені  ст 493 Г.Шилд


        TreeMap<String,String> treeMap = new TreeMap<>();//Це відсортована мапа в (якій ключі відсотовані) занчення сортуються по алгортму (Red-Black) або дерево усі елементи у даній мапі сортуються
                                                        // інформація зберігається у Entry які зберігають зсилкі на інші сусідні Entry ст 492 Г.Шилд

        Map hashtable = new Hashtable(); //Це копія HashMap відмінність у неї усі методи синхронізовані(потоки)

        IdentityHashMap identityHashMap = new IdentityHashMap();//Використовує перевірку евівалентності при порівнянні документів ст 495 Г.Шилд


        WeakHashMap weakHashMap = new WeakHashMap();//WeakHashMap(нестрога зсилка) Своєрідний збірник мусора на рівні колекції який видаляє обєкти які не використовуються в колекції

//       SortedMap sortedMap = new SortedMap() {   //Дана колекція гарантує розміщення елементів по зросанню ключів (мапа з відсортованими ключами)//448 Шилд
//       }
        //EnumMap enumMap = new EnumMap() //Мапа для використання з ключами emum ст 495 Г.Шилд



        AbstractMap abstractMap =new AbstractMap() {//реалізує більшу частину інтерфейса Map являється суперкласом для інших класів MAP
            @Override
            public Set<Entry> entrySet() {
                return null;
            }
        };




        //Загальні методи

    hashMap.put("1","Dan Braun");//Метод який добавляє елемент до колекції  першим в кострукторі іде ключ обєкта другим його назва
    hashMap.put("2","Ivan Franco");
    hashMap.put("3","Schecspir");
    hashMap.put("4","Taras Schevchenco");

            //System.out.println(colection.get("2"));

        Set set = hashMap.entrySet();//Цикл який відображає масив значень у колекції
            for (Object o: set){
//System.out.println(o);
            }


    Set set1 = hashMap.keySet();//Цикл який відображає ключі у даній колекції
    for (Object o: set1){
       // System.out.println(o);




    }
//Робота з treeMap
    treeMap.put("a","1");
    treeMap.put("b","2");
    treeMap.put("c","3");
    treeMap.put("d","4");

    //Навігація по Map
    System.out.println(treeMap.subMap("a","d"));//Підвид treeMap subMap відображає елементи від пешого  введеного включно  до другого введеного виключно
    System.out.println(treeMap.headMap("b"));//Підвид treeMap headMap відображає елементи від введеного  елемента виключно до першого
    System.out.println(treeMap.tailMap("a"));//Підвид treeMap tailMap відображає елементи від введеного  елемента включно до останнюго



//Методи Collections6MapCollection ст 487 Г.Шилд

//hashMap.putAll(); перекопійовує усі елементи колекції з однієї в іншу
//hashMap.put() помістити обєкт в дану колекцію по ключу
//hashMap.containsKey() поверитає trye якщо в карті є вказаний ключ
//hashMap.containsValue() поверитає trye якщо в карті є вказане занченн
// hashMap.get() виводить значення елемента по ключу
// treeMap.subMap()//Метод вибору діапазону по ключах


        //Інтефейс SortedMap
        //Даний інтерфейс розширює Map.
        // Він гарантує що елементи розмістяться в порядку зростання ключів
        // Методи 488 Шилд



//Інтефейс NavigableMap
        //для обробки вилучення елементів на основі пошуку по найближчому співпадінню // Методи 489 Шилд

    }}


    //LOAD FACTOR
//Початкова величина в  HashMap рівна 16
//load factor
//Якщо забирати елементи з даної колекції вона автоматично не зменшується

// HashMap  load factor рівний 0.75f. Дана величина працює наступним принципом - по дефолту початкова величина HashMap
// рівна 16 елементам якщо дана колекція буде заповнена на 75% (12 елементів) тоді HashMap буде збільшена у 2 рази до
// 32 елементів і так далі. Даний параметер можна міняти через спеціальний конструктор
